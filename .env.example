# pprox Configuration Example
# Copy this file to .env and update with your actual values

# Proxy server address (host:port)
# Default: :54329
PROXY_ADDR=":54329"

# PostgreSQL DSN for read replica
# Format: postgresql://username:password@hostname:port/database
PG_READER_DSN="postgresql://postgres:password@localhost:5432/mydb"

# Comma-separated list of PostgreSQL DSNs for write servers
# All writers will receive the same write queries in a transaction
PG_WRITERS_CSV="postgresql://postgres:password@localhost:5433/mydb,postgresql://postgres:password@localhost:5434/mydb"

# ============================================================================
# TLS Configuration
# ============================================================================

# Enable TLS (true/false or 1/0)
# Default: false
TLS_ENABLED="true"

# Path to TLS certificate file (PEM format)
# Required when TLS_ENABLED=true
TLS_CERT_FILE="/path/to/server.crt"

# Path to TLS private key file (PEM format)
# Required when TLS_ENABLED=true
TLS_KEY_FILE="/path/to/server.key"

# ============================================================================
# Authentication Configuration
# ============================================================================

# Credential Source
# Options: env, file, vault, aws, k8s, http
# Default: env
CREDENTIAL_SOURCE="env"

# ===== Option 1: Environment Variables (Default) =====
# User credentials for SCRAM-SHA-256 authentication
# Format: username1:password1,username2:password2
# Leave empty for trust mode (no authentication)
PG_USERS="alice:secret123,bob:password456"

# ===== Option 2: Encrypted File =====
# CREDENTIAL_SOURCE="file"
# CREDENTIAL_FILE="/etc/pprox/credentials.json.enc"
# CREDENTIAL_ENCRYPTION_KEY="your-32-byte-encryption-key-here"
# CREDENTIAL_RELOAD_INTERVAL="5m"

# ===== Option 3: HashiCorp Vault =====
# CREDENTIAL_SOURCE="vault"
# VAULT_ADDR="https://vault.example.com:8200"
# VAULT_TOKEN="s.xxxxxxxxxxxxxxxx"
# VAULT_SECRET_PATH="secret/data/pprox/users"
# CREDENTIAL_RELOAD_INTERVAL="5m"

# ===== Option 4: AWS Secrets Manager =====
# CREDENTIAL_SOURCE="aws"
# AWS_SECRET_NAME="pprox/users"
# AWS_REGION="us-east-1"
# CREDENTIAL_RELOAD_INTERVAL="5m"

# ===== Option 5: Kubernetes Secrets =====
# CREDENTIAL_SOURCE="k8s"
# K8S_SECRET_PATH="/var/run/secrets/pprox"
# CREDENTIAL_RELOAD_INTERVAL="30s"

# ===== Option 6: HTTP API =====
# CREDENTIAL_SOURCE="http"
# CREDENTIAL_API_ENDPOINT="https://secrets.example.com/api/v1/pprox/users"
# CREDENTIAL_API_KEY="your-api-key"
# CREDENTIAL_RELOAD_INTERVAL="5m"

# ============================================================================
# Backend TLS Configuration (Proxy to Database Connections)
# ============================================================================

# Backend TLS mode
# Options: disable, require, verify-ca, verify-full
# - disable: No TLS (plaintext connection to backends)
# - require: TLS required but certificate not verified (encrypted but not authenticated)
# - verify-ca: TLS with CA certificate verification (no hostname check)
# - verify-full: TLS with full certificate and hostname verification (most secure)
# Default: disable
BACKEND_TLS_MODE="verify-full"

# Root CA certificate for backend verification
# Required for verify-ca and verify-full modes
# This is the CA that signed the backend PostgreSQL server certificates
BACKEND_TLS_ROOT_CA="/path/to/backend-ca.crt"

# Client certificate for mutual TLS (optional)
# If backends require client certificate authentication
BACKEND_TLS_CLIENT_CERT="/path/to/client.crt"
BACKEND_TLS_CLIENT_KEY="/path/to/client.key"

# Example configurations:

# Development (no backend TLS):
# BACKEND_TLS_MODE="disable"

# Production (encrypted but not verified - for self-signed certs):
# BACKEND_TLS_MODE="require"

# Production (CA verified):
# BACKEND_TLS_MODE="verify-ca"
# BACKEND_TLS_ROOT_CA="/etc/pprox/certs/backend-ca.crt"

# Production (full verification - recommended):
# BACKEND_TLS_MODE="verify-full"
# BACKEND_TLS_ROOT_CA="/etc/pprox/certs/backend-ca.crt"

# Production with mutual TLS:
# BACKEND_TLS_MODE="verify-full"
# BACKEND_TLS_ROOT_CA="/etc/pprox/certs/backend-ca.crt"
# BACKEND_TLS_CLIENT_CERT="/etc/pprox/certs/proxy-client.crt"
# BACKEND_TLS_CLIENT_KEY="/etc/pprox/certs/proxy-client.key"

# ============================================================================
# Example Configurations
# ============================================================================

# Example with multiple writers:
# PG_WRITERS_CSV="postgresql://user:pass@writer1.example.com:5432/mydb,postgresql://user:pass@writer2.example.com:5432/mydb,postgresql://user:pass@writer3.example.com:5432/mydb"

# Example with cloud providers:
# AWS RDS:
# PG_READER_DSN="postgresql://admin:password@mydb-replica.abc123.us-east-1.rds.amazonaws.com:5432/mydb"
# PG_WRITERS_CSV="postgresql://admin:password@mydb-primary.abc123.us-east-1.rds.amazonaws.com:5432/mydb"

# Google Cloud SQL:
# PG_READER_DSN="postgresql://postgres:password@/mydb?host=/cloudsql/project:region:instance-replica"
# PG_WRITERS_CSV="postgresql://postgres:password@/mydb?host=/cloudsql/project:region:instance-primary"

# Azure Database for PostgreSQL:
# PG_READER_DSN="postgresql://admin@myserver:password@myserver-replica.postgres.database.azure.com:5432/mydb?sslmode=require"
# PG_WRITERS_CSV="postgresql://admin@myserver:password@myserver-primary.postgres.database.azure.com:5432/mydb?sslmode=require"
